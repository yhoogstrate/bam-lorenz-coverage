#!/usr/bin/env python

import click
import sys


import blc
from blc.blc import bamlorenzcoverage


@click.command()
@click.version_option(blc.__version__ + "\n\n" + blc.__license_notice__ + "\n\nCopyright (C) 2018  " + blc.__author__ + ".\n\nFor more info please visit:\n" + blc.__homepage__)
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.option('-l', '--lorenz-table', nargs=1, help='Output table Lorenz-curve (for stdout use: -)')
@click.option('-c', '--coverage-table', nargs=1, help='Output table Coverage-graph (for stdout use: -)')
@click.option('-L', '--lorenz-svg', nargs=1, help='Output figure Lorenz-curve (SVG).')
@click.option('-C', '--coverage-svg', nargs=1, help='Output figure Coverage-graph (SVG).')
@click.option('-s', '--stats', nargs=1, help='Output additional stats to text-file')
@click.option('-r', '--region', nargs=1, help='Scan depth only in selected region <chr:from-to> (all positions: 1-based)')
@click.option('-b', '--bed-regions', nargs=1, help='Scan depth only in selected positions or regions (BED file: start: 0-based & end: 1-based)')
def CLI(lorenz_table, coverage_table, lorenz_svg, coverage_svg, input_alignment_file, stats, region, bed_regions):
    b = bamlorenzcoverage()
    idx_observed, n = b.bam_file_to_idx(input_alignment_file, region, bed_regions)

    if coverage_table or coverage_svg:
        cumulative_coverage_curves = b.estimate_cumulative_coverage_curves(idx_observed)

        if coverage_table:
            if coverage_table == '-':
                b.export_cumulative_coverage_curves(cumulative_coverage_curves, sys.stdout)
            else:
                with open(coverage_table, 'w') as fh:
                    b.export_cumulative_coverage_curves(cumulative_coverage_curves, fh)

        if coverage_svg:
            b.export_cumulative_coverage_plot(cumulative_coverage_curves, coverage_svg)

    if lorenz_table or lorenz_svg or stats:
        lorenz_curves = b.estimate_lorenz_curves(idx_observed)

        if lorenz_table:
            if lorenz_table == '-':
                b.export_lorenz_curves(lorenz_curves, sys.stdout)
            else:
                with open(lorenz_table, 'w') as fh:
                    b.export_lorenz_curves(lorenz_curves, fh)

        if lorenz_svg:
            b.export_lorenz_plot(lorenz_curves, lorenz_svg)

    if stats:
        with open(stats, "w") as fh:
            fh.write("total_investigated_genomic_positions\t" + str(n) + "\n")
            fh.write("ROC_Lorenz_curve\t" + str(lorenz_curves["roc"]) + "\n")
            fh.write("total_sequenced_bases\t" + str(lorenz_curves["total_sequenced_bases"]) + "\n")
            fh.write("total_covered_positions_of_genome\t" + str(lorenz_curves["total_covered_positions_of_genome"]) + "\n")


def main():
    CLI()


if __name__ == '__main__':
    main()
